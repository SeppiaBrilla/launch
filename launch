#!/usr/bin/python3
import sys
import os
import shutil

current_dir = os.getcwd()
directory_name = ".launch"
directory = os.path.join(current_dir, directory_name)
master_file_name = "master"
master_file = os.path.join(directory, master_file_name)

separator = "::"


def file_cicler(function, file, args):
    with open(file, "r") as f:
        lines = f.readlines()
        with open(file, "w") as f:
            for line in lines:
                function(line, f, args)
    return 


def find_file(directory, file_name):
    for file in os.listdir(directory):
        if(file == file_name):
            return True
    return False

def find_option_in_file(option_name):
    if not find_file(current_dir, directory_name) and find_file(directory, master_file_name):
        return False
    f = open(master_file, "r")
    for line in f:
        if option_name == line.split()[0]:
            return True
    return False

def prompt(text):
    return input(text + " Y/N ").capitalize() == "Y" 

def option(args):
    if "-" == args[1][0]:
        settings(args[1:])
    else:
        read(args[1])

def settings(args):
    if not find_file(current_dir, directory_name) and args[0]!= "-help" and args[0]!= "-new":
        print(".launch file not found, please create one whit the -new option or use the -help option if you want help")
        return
    if not args[0] in allSettings:
        print("option not found, please use the -help option if you want help")
        return
    if allSettings[args[0]](args[1:]):
        print("not enough arguments, please use the -help option if you want help")

def new(args):
    if len(args) < 3 and args[0] != "-list":
        return 1
    if find_file(current_dir, directory_name):
        if args[0] == "-list":
            new_list("\n")
            return
        elif find_option_in_file(args[0]):
            print("there's already an option with this name, abort")
            return
        f = open(master_file, "a")
        f.write(args[0]+" "+args[1]+" "+args[2] + "\n")
        f.close()
    else:
        if not prompt("I've not found a .launch file, do you want me to create one?"):
            print("abort")
            return 0
        if find_file(current_dir,".gitignore"):
            if prompt("do you want me to update your gitignore?"):
                git = open(".gitignore","a")
                git.write(directory_name)
                git.close()
        os.mkdir(directory)
        f = open(master_file,"x")
        if args[0] == "-list":
            new_list("--default\n")
            return
        f.write(args[0]+" "+args[1]+" "+args[2] + " --default\n")
        f.close()
    return 0

def new_list(default):
    name = input("what's the new option name?\n")
    if find_option_in_file(name):
        print("there's already an option with this name, abort")
        return
    
    option_lines = []
    program_name = input("insert the name of the program to call\n")
    line = []
    line.append(program_name)
    args = separator
    while prompt("do you want to add an argument"):
        args = args + separator + input("new argument:\n")
    
    line.append(args)
    option_lines.append(line)
    
    while prompt("do you want to add a program"):
        program_name = input("insert the name of the program to call\n")
        line = []
        line.append(program_name)
        args = separator
        while prompt("do you want to add an argument"):
            args = args + separator + input("new argument:\n")
    
        line.append(args)
        option_lines.append(line)

    f = open(master_file,"a")
    f.write(name + " " + "launcher" + " " + name + "_file" + " " + default)
    f.close()
    new_file = open(os.path.join(directory, name + "_file"), "x")
    for line in option_lines:
        new_line = " ".join(line) + "\n"
        new_file.write(new_line)
    new_file.close()



def remove(args):
    def to_call(line, f, args):
        if "--default" == line.split()[len(line.split()) - 1] and line.split()[0] == args[0]:
            if not prompt("You are deleting the defaut option, are you sure?"):
                f.write(line)
        elif line.split()[0] != args[0]:
            f.write(line)

    if len(args) < 1:
        return 1

    file_cicler(to_call, master_file, args)

def rename(args):
    def to_call(line, f, args):
        if line.split()[0] != args[0]:
            f.write(line)
        else:
            new_line = line.split()
            new_line[0] = args[1]
            new_line = ' '.join(new_line)
            if prompt("    do you want to change line :\n" + line + "\n   to:\n" + new_line + "\n   ?"):
                f.write(new_line + "\n")
            else:
                f.write(line)

    if len(args) < 2:
        return 1
    if find_option_in_file(args[0]):
        print("there's already an option with this name, abort")
        return
    file_cicler(to_call, master_file, args)
                    

def mkdflt(args):
    def to_call(line, f, args):
        if line.split()[0] != args[0] and line.split()[len(line.split()) - 1] != "--default":
            f.write(line)
        elif line.split()[0] != args[0] and line.split()[len(line.split()) - 1] == "--default":
            if prompt("the option: " +line.split()[0] + " will not be the default one anymore, are you sure?"):
                line = line.split()
                line[len(line) - 1] = ""
                f.write(" ".join(line) + "\n")
            else:
                print("abort")
        elif line.split()[0] == args[0] and line.split()[len(line.split()) - 1] == "--default":
                print("already the defaut option")
        else:
            line = line[:-1] + " --default\n"
            f.write(line)
    
    if len(args) < 1:
        return 1

    file_cicler(to_call, master_file, args)
    return 0

def erase(args):
    if find_file(current_dir, directory_name):
        try:
            shutil.rmtree(directory)
        except:
            print("an error occurred")

def help(args):
    print("Hi, thanks for having installed launch, this program will help you to create macros that calls a program with a set of arguments for you! Here's how:")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------") 
    print("you can just call launch without arguments, it will just call the default option")
    print("you can call launch <option name> to call a specific option")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------")
    print("use -new add an option to your .lauch file (you can also -new to create a new -launch file if not present in folder)")
    print("    usage 1: -new <new option name> <program to call> <file argument of the program>")
    print("    usage 2: -new -list to create a macro that opens multiple files")
    print("you can also call the program with a set of arguments or none. To have a set of arguments just list them all separated by a '"+ separator +"', if you don't want to have arguments just write '"+ separator +"'")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------")
    print("use -remove to remove an already existing option")
    print("    usage: -remove <option name>")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------")
    print("use -rename to rename an already existing option")
    print("    usage: -rename <old name> <new name>")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------")
    print("use -mkdflt to change the default option, if there's one, or create it if not")
    print("    usage: -mkdflt <option name>")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------")
    print("use -erase to delete the .launch folder in the current directory")
    print("    usage: -erase")
    print("-------------------------------------------------------------------------------------------------------------------------------------------------")

def read(called):
    if not find_file(current_dir, directory_name):
        print(".launch file not found, please create whit the -new option one or use the -help option if you want help")
        return
    f = open(master_file, "r")
    for line in f:
        splitted = line.split()
        if called == splitted[0] or (called == splitted[len(splitted) - 1] and called == "--default"):
            if splitted[1] != "launcher" :
                os.system(splitted[1] + " " + " ".join(splitted[2].split(separator)))
            else:
                launch_file = open(os.path.join(directory, splitted[2]))
                for launch_line in launch_file:
                    launch_splitted = launch_line.split()
                    os.system(launch_splitted[0] + " " + " ".join(launch_splitted[1].split(separator)))
                
                launch_file.close()
            f.close()
            return
    
    print("option not found")
    f.close()

def main():
    if len(sys.argv) > 1:
        option(sys.argv)
    else:
        read("--default")

allSettings = {"-new": new, "-remove":remove, "-rename": rename, "-mkdflt": mkdflt, "-erase":erase, "-help": help}

if __name__=="__main__":
    main()

